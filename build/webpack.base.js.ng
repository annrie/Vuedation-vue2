/* jshint esversion: 6 */
'use strict';

const path = require('path');
// const fs = require('fs');
const utils = require('./utils');
const config = require('../config');
const { VueLoaderPlugin } = require('vue-loader');
// const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
// const OptimizeCSSAssetsPlugin = require("optimize-css-assets-webpack-plugin");
// const TerserPlugin = require('terser-webpack-plugin');
// const FixStyleOnlyEntriesPlugin = require("webpack-fix-style-only-entries");
// const ExtractTextPlugin = require('extract-text-webpack-plugin');

const devMode = process.env.NODE_ENV !== 'production';

function resolve (dir) {
  return path.join(__dirname, '..', dir) // __dirnameは webpack.config.js があるディレクトリの絶対パス
}

module.exports = {
  context: resolve(''),
  entry: {
    main: './src/main.js',
    // styles: ['./src/styles/app.scss', './src/styles/global.scss']
  },
  output: {
    path: resolve('dist'),
    filename: devMode ? 'js/[name].js' : 'js/[name].[chunkhash].js',
    chunkFilename: devMode ? 'js/[name].js' : 'js/[name].[chunkhash].js',
    publicPath: '/',
  },
  resolve: {
    extensions: ['*','.js', '.vue', '.json', '.css'],
    modules: [
      resolve('src'),
      resolve('node_modules'),
    ],
    alias: {
      'vue$': 'vue/dist/vue.esm.js',
      '@': resolve('src'),
      'zf': 'foundation-sites/js',
    },
    symlinks: false
  },

  optimization: {
    splitChunks: {
      chunks: 'async',
      name: true,
      cacheGroups: {
        common: {
          name: 'common',
          chunks: 'initial',
          minChunks: 2
        },
        vendor: {
          name: 'vendor',
          test: /[\\/]node_modules[\\/]/,
          chunks: 'all'
        }
      }
    }
  },

  module: {
    rules: [
      {
        enforce: 'pre',
        test: /\.(js|vue)$/,
        loader: 'eslint-loader',
        include: [resolve('src'), resolve('test')],
        options: {
          formatter: require('eslint-friendly-formatter')
        }
      },
      {
        test: /\.vue$/,
        loader: 'vue-loader',
        options: {
          loaders: {
            // Since sass-loader (weirdly) has SCSS as its default parse mode, we map
            // the "scss" and "sass" values for the lang attribute to the right configs here.
            // other preprocessors should work out of the box, no loader config like this necessary.
            'scss': [
              'vue-style-loader',
              'css-loader',
              'sass-loader'
            ],
            'sass': [
              'vue-style-loader',
              'css-loader',
              'sass-loader?indentedSyntax'
            ]
          },
          prettify: false,
          transformAssetUrls: {
            video: ['src', 'poster'],
            source: 'src',
            img: 'src',
            image: 'xlink:href'
          },
          // },
        },
      },
      {
        test: /\.js$/,
        loader: require.resolve('babel-loader'),
        include: [resolve('src'), resolve('test'), resolve('node_modules/foundation-sites/js'), resolve('node_modules/webpack-dev-server/client')]
      },
    //   {
    //     test: /\.(sa|sc|c)ss$/,
    //     use: [
    //       MiniCssExtractPlugin.loader,// javascriptとしてバンドルせず css として出力する
    //       {
    //         loader: 'vue-style-loader',
    //         options: {
    //           // url: false,
    //           sourceMap: devMode
    //         }
    //       },
    //       {
    //         loader: 'css-loader',//CSSをJavascriptとして実行可能な形式にするのかな？？
    //         options: {
    //           url: false,
    //           sourceMap: devMode
    //         }
    //       },
    //       {
    //         loader: 'postcss-loader',
    // //         options: {
    // //           plugins: [
    // //             AutoPrefixer(
    // //               {
    // //                 overrideBrowserslist: ['last 4 versions'],
    // //     gird: 'autoplace'
    // //   }
    // //               )
    // // ]
    // //           }
    //       },
    //       {
    //        loader:  'sass-loader',//SASSをCSSに変換
    //           options: {
    //             sourceMap: devMode
    //           }
    //       },
          // resolve('node_modules/foundation-sites/scss/'),
          {
            loader: 'sass-resources-loader',
            options: {
              resources: ['./src/styles/global.scss','./src/styles/app.scss'],
            },
          },
      //   ],
      // },
      {
        test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,
        loader: 'url-loader',
        options: {
          limit: 10000,
          name: 'img/[name].[hash:7].[ext]'
        }
      },
      {
        test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,
        loader: 'url-loader',
        options: {
          limit: 10000,
          name:  'media/[name].[hash:7].[ext]'
        }
      },
      {
        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
        loader: 'url-loader',
        options: {
          limit: 10000,
          name:  'fonts/[name].[hash:7].[ext]'
        }
      }
    ]
  },
  plugins: [
    new VueLoaderPlugin(),
    // new FixStyleOnlyEntriesPlugin(),
    // new MiniCssExtractPlugin({
    //   // Options similar to the same options in webpackOptions.output
    //   // both options are optional
    //   filename: devMode ? 'css/[name].css' : 'css/[name].[contenthash].css',
    //   chunkFilename: devMode ? 'css/[id].css' : 'css/[id].[contenthash].css',
    //   ignoreOrder: false, // Enable to remove warnings about conflicting order
    // }),
    new HtmlWebpackPlugin({
      filename: 'index.html',
      template: 'index.html',
      inject: true
    }),
  ],
    // optimization: {
    //   minimizer: [[new TerserPlugin({}), new OptimizeCSSAssetsPlugin({})]],
    //       minimize: !devMode

    // },
    // ローカル開発用環境を立ち上げる
    // 実行時にブラウザが自動的に localhost を開く
    devServer: {
        contentBase: 'dist',
      historyApiFallback: true,
        compress: true,
        noInfo: true,
        overlay: true,
        open: true
  },
  performance: {
    hints: false
  },
  devtool: '#eval-source-map'
};
